// Prisma Schema for Golf Journey Map Scraper
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseType {
  LINKS
  PARKLAND
  DESERT
  MOUNTAIN
  RESORT
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum LogCategory {
  SCRAPING
  VALIDATION
  PROCESSING
  API
  MEDIA
}

enum ImageCategory {
  HERO
  GALLERY
  MAP
  AMENITY
  THUMBNAIL
}

enum ImageFormat {
  JPEG
  PNG
  WEBP
  AVIF
  GIF
}

enum ImageQuality {
  HIGH
  MEDIUM
  LOW
}

model Course {
  id                   String             @id @default(cuid())
  name                 String
  location             String
  latitude             Float
  longitude            Float

  // Course description and details
  description          String?            @db.Text
  history              String?            @db.Text
  architect            String?
  openingYear          Int?
  courseType           CourseType?

  // Golf-specific technical data
  totalYardage         Int?
  courseRating         Float?
  slopeRating          Float?
  parScore             Int?
  numberOfHoles        Int?               @default(18)

  // Tournament and historical data
  majorChampionships   String[]
  notableEvents        String[]
  pgatourEvents        String[]

  // Practical information
  phoneNumber          String?
  website              String?
  teeTimeBookingUrl    String?
  emailContact         String?

  // Pricing and accessibility
  greensFeePriceRange  String?
  cartRequired         Boolean            @default(false)
  dressCode            String?
  publicAccess         Boolean            @default(true)

  // Media and visual content
  heroImageUrl         String?
  galleryImages        String[]
  courseMapUrl         String?
  aerialViewUrl        String?

  // SEO and content fields
  metaDescription      String?
  keywords             String[]
  altTextImages        String[]

  // Weather and location data
  currentWeather       Json?
  averageTemperature   Json?
  timezone             String?

  // Data quality and automation metadata
  lastUpdated          DateTime           @default(now()) @updatedAt
  dataSourceConfidence Float?
  automationFlags      String[]
  dataSources          String[]

  // Relations
  reviews              Review[]
  userPhotos           UserPhoto[]
  qualityReports       QualityReport[]
  scrapingLogs         ScrapingLog[]
  mediaItems           MediaItem[]
  imageVariants        ImageVariant[]

  // Indexes
  @@index([latitude, longitude], name: "idx_course_location")
  @@index([name], name: "idx_course_name")
  @@index([courseType], name: "idx_course_type")
  @@index([lastUpdated], name: "idx_last_updated")
}

model Review {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  rating      Float
  comment     String?  @db.Text
  author      String?
  source      String   // e.g., "TripAdvisor", "Google", etc.
  reviewDate  DateTime
  createdAt   DateTime @default(now())

  @@index([courseId])
}

model UserPhoto {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  photoUrl    String
  caption     String?
  uploadedBy  String?
  uploadDate  DateTime
  createdAt   DateTime @default(now())

  @@index([courseId])
}

model QualityReport {
  id                   String   @id @default(cuid())
  courseId             String
  course               Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Quality metrics
  completenessScore    Float
  accuracyScore        Float
  consistencyScore     Float
  freshnessScore       Float
  reliabilityScore     Float
  overallScore         Float

  // Issues and recommendations
  issues               Json
  recommendations      String[]
  manualReviewRequired Boolean  @default(false)
  confidenceLevel      String   // 'high', 'medium', 'low'

  createdAt            DateTime @default(now())

  @@index([courseId])
  @@index([createdAt])
}

model ScrapingLog {
  id          String      @id @default(cuid())
  courseId    String?
  course      Course?     @relation(fields: [courseId], references: [id], onDelete: SetNull)

  timestamp   DateTime    @default(now())
  level       LogLevel
  category    LogCategory
  message     String      @db.Text
  metadata    Json?

  // Scraping specific data
  url         String?
  statusCode  Int?
  duration    Int?        // milliseconds
  success     Boolean
  error       String?

  @@index([courseId])
  @@index([timestamp])
  @@index([level])
  @@index([category])
}

model MediaItem {
  id              String        @id @default(cuid())
  courseId        String
  course          Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Basic image information
  category        ImageCategory
  originalUrl     String?
  localPath       String
  filename        String

  // Image metadata
  width           Int
  height          Int
  fileSize        Int           // bytes
  format          ImageFormat
  quality         ImageQuality

  // Content and accessibility
  altText         String
  caption         String?
  description     String?       @db.Text

  // Processing metadata
  isProcessed     Boolean       @default(false)
  processingDate  DateTime?
  source          String        // 'download', 'upload', 'generated'
  license         String?
  attribution     String?

  // Quality and validation
  qualityScore    Float?        // 0-100
  validationIssues String[]
  isUsable        Boolean       @default(true)

  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  variants        ImageVariant[]
  qualityReports  ImageQualityReport[]

  @@index([courseId])
  @@index([category])
  @@index([isProcessed])
  @@index([qualityScore])
  @@index([createdAt])
}

model ImageVariant {
  id            String     @id @default(cuid())
  mediaItemId   String
  mediaItem     MediaItem  @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)
  courseId      String
  course        Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Variant specifications
  size          String     // 'sm', 'md', 'lg', 'xl', 'thumbnail'
  width         Int
  height        Int
  format        ImageFormat
  quality       Int        // 1-100

  // File information
  filename      String
  localPath     String
  fileSize      Int        // bytes

  // Optimization metadata
  compressionRatio Float?
  optimizedAt      DateTime  @default(now())

  @@index([mediaItemId])
  @@index([courseId])
  @@index([size])
}

model ImageQualityReport {
  id              String    @id @default(cuid())
  mediaItemId     String
  mediaItem       MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  // Quality metrics (0-100 scale)
  overallScore    Float
  sharpnessScore  Float
  exposureScore   Float
  colorScore      Float
  resolutionScore Float

  // Detailed analysis
  issues          String[]
  recommendations String[]

  // Validation results
  isUsable        Boolean
  confidenceLevel String    // 'high', 'medium', 'low'

  // Processing metadata
  analysisMethod  String    // 'automated', 'manual', 'hybrid'
  processingTime  Int?      // milliseconds

  createdAt       DateTime  @default(now())

  @@index([mediaItemId])
  @@index([overallScore])
  @@index([isUsable])
}

model MediaProcessingJob {
  id              String    @id @default(cuid())
  type            String    // 'download', 'optimize', 'enhance', 'validate', 'generate_alt_text'
  status          String    // 'pending', 'processing', 'completed', 'failed'
  priority        Int       @default(5)

  // Target information
  courseId        String?
  mediaItemId     String?

  // Job configuration
  inputParams     Json
  outputResults   Json?

  // Progress tracking
  totalItems      Int?
  processedItems  Int       @default(0)
  failedItems     Int       @default(0)

  // Error handling
  error           String?
  retryCount      Int       @default(0)
  maxRetries      Int       @default(3)

  // Timing
  scheduledAt     DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime  @default(now())

  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([courseId])
  @@index([scheduledAt])
}

model MediaStorageMetrics {
  id              String    @id @default(cuid())
  courseId        String?   // null for global metrics

  // Storage statistics
  totalImages     Int       @default(0)
  totalSizeMB     Float     @default(0.0)
  originalSizeMB  Float     @default(0.0)
  optimizedSizeMB Float     @default(0.0)

  // Category breakdown
  heroImages      Int       @default(0)
  galleryImages   Int       @default(0)
  mapImages       Int       @default(0)
  amenityImages   Int       @default(0)
  thumbnails      Int       @default(0)

  // Quality metrics
  averageQuality  Float?
  usableImages    Int       @default(0)

  // Processing statistics
  processedImages Int       @default(0)
  pendingImages   Int       @default(0)
  failedImages    Int       @default(0)

  // Timestamps
  calculatedAt    DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([courseId])
  @@index([calculatedAt])
}

model Configuration {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

model DataSource {
  id           String   @id @default(cuid())
  name         String   @unique
  type         String   // 'API', 'WEBSITE', 'DATABASE'
  baseUrl      String?
  apiKey       String?
  headers      Json?
  rateLimit    Int?     // requests per minute
  isActive     Boolean  @default(true)
  lastChecked  DateTime?
  reliability  Float?   // 0.0 to 1.0
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ProcessingJob {
  id           String   @id @default(cuid())
  type         String   // 'SCRAPING', 'VALIDATION', 'IMAGE_PROCESSING'
  status       String   // 'PENDING', 'RUNNING', 'COMPLETED', 'FAILED'
  priority     Int      @default(5) // 1-10, higher is more important
  courseId     String?

  // Job details
  config       Json?
  result       Json?
  error        String?

  // Timing
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())

  // Progress tracking
  totalItems   Int?
  processedItems Int?

  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([scheduledAt])
}